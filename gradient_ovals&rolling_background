void setup() {
  size(1200, 600);
  smooth();
}
float unit;
float t;
float alpha,theta;
float y=0;
float a=0;
void draw() {
  background(255);
  translate(300, 300);

float_background(1300,5);
ellipsesss();
}


void float_background(int iMax,float s){
  pushMatrix();
translate(300,0);
a=a+s;
  pushMatrix();
  translate(-iMax/2,0);
for (int i=1; i<=iMax; i++) {
    ////虚线全长为len
    int len=1*iMax+1;
    ////界点数=段数为n
    float n=10;
    ////界点x=（虚线全长-1）*（x/段数）+1
    ////x=((len-1)*x/4+1)
    //  if((i>=((len-1)*0/4+1))&&(i<=((len-1)*1/4+1))){
    //p0=1,p1=51,p2=101,p3=151,p4=201
    float p0=((len-1)*0/n+1);
    float p1=((len-1)*1/n+1);
    float p2=((len-1)*2/n+1);
    float p3=((len-1)*3/n+1);
    float p4=((len-1)*4/n+1);
    float p5=((len-1)*5/n+1);
    float p6=((len-1)*6/n+1);
    float p7=((len-1)*7/n+1);
    float p8=((len-1)*8/n+1);
    float p9=((len-1)*9/n+1);
    float p10=((len-1)*10/n+1);
    color from=0;
    color to=255;
    //int t=18;
println(p8);
    float t_Final=a%len;

    if ((t_Final>=0)&&(t_Final<=iMax)) {
      if (i<=t_Final) {
        unit=i+(len-t_Final);
      }  
      if (i>t_Final) {
        unit=i-t_Final;
      }
    }

    if ((t_Final>iMax)&&(t_Final<len)) {
      unit=i+(len-t_Final);
    }
    //println(unit,t_Final);

    if ((unit>=p0)&&(unit<=p1)) {
      float inter=norm(unit, p0, p1);
      color gray=lerpColor(from, to, inter);
      stroke(gray);
    }
    if ((unit>=p1)&&(unit<=p2)) {
      float inter=norm(unit, p1, p2);
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
    if ((unit>=p2)&&(unit<=p3)) {
      //norm（i,界点2，界点3）；
      float inter=norm(unit, p2, p3);
      //lerpColor(黑到白)
      color gray=lerpColor(from, to, inter);
      stroke(gray);
    }
    if ((unit>=p3)&&(unit<=p4)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p3, p4);
      //lerpColor(白到黑)
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
       if ((unit>=p4)&&(unit<=p5)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p4, p5);
      //lerpColor(白到黑)
      color gray=lerpColor(from,to,  inter);
      stroke(gray);
    }
       if ((unit>=p5)&&(unit<=p6)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p5, p6);
      //lerpColor(白到黑)
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
       if ((unit>=p6)&&(unit<=p7)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p6, p7);
      //lerpColor(白到黑)
      color gray=lerpColor(from,to, inter);
      stroke(gray);
    }
       if ((unit>=p7)&&(unit<=p8)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p7, p8);
      //lerpColor(白到黑)
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
       if ((unit>=p8)&&(unit<=p9)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p8, p9);
      //lerpColor(白到黑)
      color gray=lerpColor(from,to, inter);
      stroke(gray);
    }
       if ((unit>=p9)&&(unit<=p10)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p9, p10);
      //lerpColor(白到黑)
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
      
    //line(20, i, -20, i);
   // line(i, 20,i, -20);
       line(i,-300 ,i,300);
    //noLoop();
  }
  popMatrix();
  popMatrix();
  println(t);
}



void float_ellipse(int iMax){
  rotate(radians(-90));
  scale(1.0,2.0);
 float a=96;
  pushMatrix();
  translate(-iMax/2,0);
for (int i=1; i<=iMax; i++) {
    ////虚线全长为len
    int len=201;
    ////界点数=段数为n
    float n=4;
    ////界点x=（虚线全长-1）*（x/段数）+1
    ////x=((len-1)*x/4+1)
    //  if((i>=((len-1)*0/4+1))&&(i<=((len-1)*1/4+1))){
    //p0=1,p1=51,p2=101,p3=151,p4=201
    float p0=((len-1)*0/4+1);
    float p1=((len-1)*1/4+1);
    float p2=((len-1)*2/4+1);
    float p3=((len-1)*3/4+1);
    float p4=((len-1)*4/4+1);
    color from=0;
    color to=255;
    //int t=18;

    float t_Final=a%len;

    if ((t_Final>=0)&&(t_Final<=iMax)) {
      if (i<=t_Final) {
        unit=i+(len-t_Final);
      }  
      if (i>t_Final) {
        unit=i-t_Final;
      }
    }

    if ((t_Final>iMax)&&(t_Final<len)) {
      unit=i+(len-t_Final);
    }
    //println(unit,t_Final);

    if ((unit>=p0)&&(unit<=p1)) {
      float inter=norm(unit, p0, p1);
      color gray=lerpColor(from, to, inter);
      stroke(gray);
    }
    if ((unit>=p1)&&(unit<=p2)) {
      float inter=norm(unit, p1, p2);
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
    if ((unit>=p2)&&(unit<=p3)) {
      //norm（i,界点2，界点3）；
      float inter=norm(unit, p2, p3);
      //lerpColor(黑到白)
      color gray=lerpColor(from, to, inter);
      stroke(gray);
    }
    if ((unit>=p3)&&(unit<=p4)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p3, p4);
      //lerpColor(白到黑)
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
    //line(20, i, -20, i);
   // line(i, 20,i, -20);
       line(i,pow((pow(iMax/2,2)-pow(i-iMax/2,2)),0.5) ,i,-1*pow((pow(iMax/2,2)-pow(i-iMax/2,2)),0.5));
    //noLoop();
  }
  popMatrix();
  println(t);
}




void ellipsesss(){
  
  
  pushMatrix();
translate(-105,-278);
 float_ellipse(40);
popMatrix();

  pushMatrix();
translate(-45,-205);
 float_ellipse(40);
popMatrix();

  
  
  pushMatrix();
translate(-56,-152);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(159,60);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(0,0);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(279,-91);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(283,179);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(-58,133);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(403,133);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(-17,231);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(618,9);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(217,-222);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(101,-100);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(406,-262);
 float_ellipse(40);
popMatrix();

  
  pushMatrix();
translate(772,-36);
 float_ellipse(40);
popMatrix();

    pushMatrix();
translate(864,-216);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(637,-60);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(626,-223);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(475,23);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(668,147);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(433,-128);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(332,34);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(804,84);
 float_ellipse(40);
popMatrix();
  pushMatrix();
translate(332,220);
 float_ellipse(40);
popMatrix();

  
}
