void setup() {
  size(1200, 600);
  smooth();
}
float unit;
float t;
float alpha,theta;
float y=0;
void draw() {
  background(255);
  translate(30, 300);

  pushMatrix();
  y=y+2;
  if(y>600){
    y=-40;
  }
  translate(99, y-300);
  int iMax=40;
alpha=alpha+2;
  t=300*cos(radians(alpha))+300;
  //t=t+alpha;
  //if ((t>500)||(t<0)) {
  //  alpha=alpha*-1;
  //}
  println(y);
  //if(()){
  //}
  for (int i=1; i<=iMax; i++) {
    ////虚线全长为len
    int len=201;
    ////界点数=段数为n
    float n=4;
    ////界点x=（虚线全长-1）*（x/段数）+1
    ////x=((len-1)*x/4+1)
    //  if((i>=((len-1)*0/4+1))&&(i<=((len-1)*1/4+1))){
    //p0=1,p1=51,p2=101,p3=151,p4=201
    float p0=((len-1)*0/4+1);
    float p1=((len-1)*1/4+1);
    float p2=((len-1)*2/4+1);
    float p3=((len-1)*3/4+1);
    float p4=((len-1)*4/4+1);
    color from=0;
    color to=255;
    //int t=18;

    float t_Final=t%len;

    if ((t_Final>=0)&&(t_Final<=iMax)) {
      if (i<=t_Final) {
        unit=i+(len-t_Final);
      }  
      if (i>t_Final) {
        unit=i-t_Final;
      }
    }

    if ((t_Final>iMax)&&(t_Final<len)) {
      unit=i+(len-t_Final);
    }
    //println(unit,t_Final);

    if ((unit>=p0)&&(unit<=p1)) {
      float inter=norm(unit, p0, p1);
      color gray=lerpColor(from, to, inter);
      stroke(gray);
    }
    if ((unit>=p1)&&(unit<=p2)) {
      float inter=norm(unit, p1, p2);
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
    if ((unit>=p2)&&(unit<=p3)) {
      //norm（i,界点2，界点3）；
      float inter=norm(unit, p2, p3);
      //lerpColor(黑到白)
      color gray=lerpColor(from, to, inter);
      stroke(gray);
    }
    if ((unit>=p3)&&(unit<=p4)) {
      //norm（i,界点3，界点4）；
      float inter=norm(unit, p3, p4);
      //lerpColor(白到黑)
      color gray=lerpColor(to, from, inter);
      stroke(gray);
    }
    //line(20, i, -20, i);
   // line(i, 20,i, -20);
       line(i,pow((pow(iMax/2,2)-pow(i-iMax/2,2)),0.5) ,i,-1*pow((pow(iMax/2,2)-pow(i-iMax/2,2)),0.5));
    //noLoop();
  }
  popMatrix();
  
  
   float radius=1.0;
  pushMatrix();
  translate(1072,0);
  theta=theta+2;
  fill(57, 197, 187);
  rotate(radians(theta));
  for (int deg=0; deg<360*2; deg+=11) {
    float angle=radians(deg);
    float x=0+(cos(angle)*radius);
    float y=0+(sin(angle)*radius);
noStroke();
    ellipse(x, y,5,5);
    radius=radius+0.34;
  }
  popMatrix();
  
}
